<!--********************************************************************************
 * Copyright (C) 2017-2020 German Aerospace Center (DLR). 
 * Eclipse ADORe, Automated Driving Open Research https://eclipse.org/adore
 *
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0 
 *
 * Contributors: 
 *   Daniel HeÃŸ - initial API and implementation
 ********************************************************************************-->
<launch>
  <node name="timer" pkg="adore_if_ros" type="adore_timer_node" output="screen" launch-prefix="xterm -e"  args=""/>
  <group ns="vehicle0">
    <include file="demo_plotters.launch"/>
    <include file="demo_vehicle_cfg03.launch"/>
    <param name="simulationID" value="0" type="int" />  
    <param name="PARAMS/track" value="$(dirname)/tracks/basic_test_track.xodr" type="str" />
    <param name="PARAMS/local_road_map/navigation_active" value="true" type="bool" />
    <param name="PARAMS/navigation/active_plotting_global" value="false" type="bool" />  
    <param name="PARAMS/tactical_planner/global_speed_limit" value="30" type="double" />  
    <param name="PARAMS/lateral_planner/merge_constraint_delay" value="2.0" type="double" />
    <param name="PARAMS/longitudinal_planner/acc_lat_ub" value="2" type="double" />  
    <node pkg="adore_if_ros" type="plot_predictions_node" name="plot_predictions"/><!--plot predictions-->
    <node pkg="adore_if_ros" type="plot_trajectories_node" name="plot_trajectories"/><!--plot vehicle trajectory-->
    <!-- set the start position -->
    <node pkg="rostopic" type="rostopic" name="posereset" args="pub /vehicle0/SIM/ResetVehiclePose geometry_msgs/Pose '{position: {x: 500, y: 162, z: 0},orientation: { w: 1}}'"/>
    <!-- set the goal position -->
    <node pkg="rostopic" type="rostopic" name="navgoal" args="pub -r 1 /vehicle0/ENV/NavigationGoal adore_if_ros_msg/NavigationGoal '{target: {x: 675, y: 100, z: 0}}'"/>
  </group>
  <group ns="pedestrian0">
    <param name="simulationID" value="1" type="int" />  
    <param name="PARAMS/Vehicle/a" value="0.25" type="double" />
    <param name="PARAMS/Vehicle/b" value="0.25" type="double" />
    <param name="PARAMS/Vehicle/c" value="0.0" type="double" />
    <param name="PARAMS/Vehicle/d" value="0.0" type="double" />
    <param name="PARAMS/Vehicle/bodyWidth" value="0.5" type="double" />  
    <node name="pmodel" pkg="adore_if_ros" type="adore_vehiclemodel_node" cwd="ROS_HOME"/>
    <node pkg="rostopic" type="rostopic" name="posereset" args="pub /pedestrian0/SIM/ResetVehiclePose geometry_msgs/Pose '{position: {x: 666, y: 150, z: 0},orientation: { w: 1}}'"/>
    <!-- trigger: start walking when vehicle is near intersection -->
    <node pkg="topic_tools" type="transform" name="pedestrian_trigger" args="/vehicle0/odom /pedestrian0/SIM/ResetVehicleTwist geometry_msgs/Twist 'geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=2 if m.pose.pose.position.x>666 else 0, y=0.0, z=0.0), angular=geometry_msgs.msg.Vector3( x= 0.0, y= 0.0, z= 0.0))' --import geometry_msgs std_msgs"/>
  </group>
</launch>